{"version":3,"names":["_iconvLite","_interopRequireDefault","require","_canvas","e","__esModule","default","_defineProperty","r","t","_toPropertyKey","Object","defineProperty","value","enumerable","configurable","writable","i","_toPrimitive","Symbol","toPrimitive","call","TypeError","String","Number","linewrap","Dither","Flatten","EscPosEncoder","constructor","_reset","_buffer","_codepage","_state","_encode","iconv","encode","_queue","forEach","item","push","initialize","codepage","codepages","encodingExists","Error","encodings","hanzi","text","wrap","w","lineBreak","bytes","newline","line","undefined","underline","Boolean","italic","bold","size","font","scale","align","alignments","barcode","symbology","height","symbologies","length","qrcode","model","errorlevel","models","errorlevels","image","element","width","algorithm","threshold","canvas","createCanvas","context","getContext","drawImage","getImageData","flatten","bayer","floydsteinberg","atkinson","getPixel","x","y","_image$data","data","Uint8Array","cut","raw","result","index","set","exports"],"sources":["index.ts"],"sourcesContent":["import iconv from 'iconv-lite';\nconst linewrap = require('linewrap');\nimport {createCanvas, Canvas} from 'canvas';\nconst Dither = require('canvas-dither');\nconst Flatten = require('canvas-flatten');\n\n// Type definitions\ntype Codepage =\n  | 'cp437' | 'cp737' | 'cp850' | 'cp775' | 'cp852' | 'cp855' | 'cp857' | 'cp858'\n  | 'cp860' | 'cp861' | 'cp862' | 'cp863' | 'cp864' | 'cp865' | 'cp866' | 'cp869'\n  | 'cp936' | 'cp949' | 'cp950' | 'cp1252' | 'iso88596' | 'shiftjis' | 'windows874'\n  | 'windows1250' | 'windows1251' | 'windows1252' | 'windows1253' | 'windows1254'\n  | 'windows1255' | 'windows1256' | 'windows1257' | 'windows1258';\n\ntype Alignment = 'left' | 'center' | 'right';\n\ntype Size = 'small' | 'normal' | 'wide' | 'tall' | 'double';\n\ntype Symbology =\n  | 'upca' | 'upce' | 'ean13' | 'ean8' | 'code39' | 'coda39' | 'itf' | 'codabar'\n  | 'code93' | 'code128' | 'gs1-128' | 'gs1-databar-omni' | 'gs1-databar-truncated'\n  | 'gs1-databar-limited' | 'gs1-databar-expanded' | 'code128-auto';\n\ntype ErrorLevel = 'l' | 'm' | 'q' | 'h';\n\ntype CutType = 'full' | 'partial';\n\ntype DitherAlgorithm = 'threshold' | 'bayer' | 'floydsteinberg' | 'atkinson';\n\ninterface PrinterState {\n  bold: boolean;\n  italic: boolean;\n  underline: boolean;\n  hanzi: boolean;\n}\n\n\n/**\n * Create a byte stream based on commands for ESC/POS printers\n */\nexport default class EscPosEncoder {\n  private _buffer!: (number | Uint8Array | Buffer)[];\n  private _codepage!: string;\n  private _state!: PrinterState;\n\n  /**\n   * Create a new object\n   */\n  constructor() {\n    this._reset();\n  }\n\n  /**\n   * Reset the state of the object\n   */\n  private _reset(): void {\n    this._buffer = [];\n    this._codepage = 'ascii';\n\n    this._state = {\n      'bold': false,\n      'italic': false,\n      'underline': false,\n      'hanzi': false,\n    };\n  }\n\n  /**\n   * Encode a string with the current code page\n   *\n   * @param value String to encode\n   * @return Encoded string as a Buffer\n   */\n  private _encode(value: string): Buffer {\n    return iconv.encode(value, this._codepage);\n  }\n\n  /**\n   * Add commands to the buffer\n   *\n   * @param value An array of numbers, arrays, buffers or Uint8Arrays to add to the buffer\n   */\n  private _queue(value: (number | Uint8Array | Buffer)[]): void {\n    value.forEach((item) => this._buffer.push(item));\n  }\n\n  /**\n   * Initialize the printer\n   *\n   * @return Return the object, for easy chaining commands\n   */\n  initialize(): this {\n    this._queue([\n      0x1b, 0x40,\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Change the code page\n   *\n   * @param value The codepage that we set the printer to\n   * @return Return the object, for easy chaining commands\n   */\n  codepage(value: Codepage): this {\n    const codepages: Record<Codepage, [number, boolean]> = {\n      'cp437': [0x00, false],\n      'cp737': [0x40, false],\n      'cp850': [0x02, false],\n      'cp775': [0x5f, false],\n      'cp852': [0x12, false],\n      'cp855': [0x3c, false],\n      'cp857': [0x3d, false],\n      'cp858': [0x13, false],\n      'cp860': [0x03, false],\n      'cp861': [0x38, false],\n      'cp862': [0x3e, false],\n      'cp863': [0x04, false],\n      'cp864': [0x1c, false],\n      'cp865': [0x05, false],\n      'cp866': [0x11, false],\n      'cp869': [0x42, false],\n      'cp936': [0xff, true],\n      'cp949': [0xfd, true],\n      'cp950': [0xfe, true],\n      'cp1252': [0x10, false],\n      'iso88596': [0x16, false],\n      'shiftjis': [0xfc, true],\n      'windows874': [0x1e, false],\n      'windows1250': [0x48, false],\n      'windows1251': [0x49, false],\n      'windows1252': [0x47, false],\n      'windows1253': [0x5a, false],\n      'windows1254': [0x5b, false],\n      'windows1255': [0x20, false],\n      'windows1256': [0x5c, false],\n      'windows1257': [0x19, false],\n      'windows1258': [0x5e, false],\n    };\n\n    let codepage: string;\n\n    if (!iconv.encodingExists(value)) {\n      throw new Error('Unknown codepage');\n    }\n\n    if (value in (iconv as any).encodings) {\n      if (typeof (iconv as any).encodings[value] === 'string') {\n        codepage = (iconv as any).encodings[value];\n      } else {\n        codepage = value;\n      }\n    } else {\n      throw new Error('Unknown codepage');\n    }\n\n    if (typeof codepages[codepage as Codepage] !== 'undefined') {\n      this._codepage = codepage;\n      this._state.hanzi = codepages[codepage as Codepage][1];\n\n      this._queue([\n        0x1b, 0x74, codepages[codepage as Codepage][0],\n      ]);\n    } else {\n      throw new Error('Codepage not supported by printer');\n    }\n\n    return this;\n  }\n\n  /**\n   * Print text\n   *\n   * @param value Text that needs to be printed\n   * @param wrap Wrap text after this many positions\n   * @return Return the object, for easy chaining commands\n   */\n  text(value: string, wrap?: number): this {\n    if (wrap) {\n      const w = linewrap(wrap, {lineBreak: '\\r\\n'});\n      value = w(value);\n    }\n\n    const bytes = this._encode(value);\n\n    if (this._state.hanzi) {\n      this._queue([\n        0x1c, 0x26, bytes, 0x1c, 0x2e,\n      ]);\n    } else {\n      this._queue([\n        bytes,\n      ]);\n    }\n\n    return this;\n  }\n\n  /**\n   * Print a newline\n   *\n   * @return Return the object, for easy chaining commands\n   */\n  newline(): this {\n    this._queue([\n      0x0a, 0x0d,\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Print text, followed by a newline\n   *\n   * @param value Text that needs to be printed\n   * @param wrap Wrap text after this many positions\n   * @return Return the object, for easy chaining commands\n   */\n  line(value?: string, wrap?: number): this {\n    if (value !== undefined) {\n      this.text(value, wrap);\n    }\n    this.newline();\n\n    return this;\n  }\n\n  /**\n   * Underline text\n   *\n   * @param value true to turn on underline, false to turn off, or 2 for double underline\n   * @return Return the object, for easy chaining commands\n   */\n  underline(value?: boolean | number): this {\n    if (typeof value === 'undefined') {\n      value = !this._state.underline;\n    }\n\n    this._state.underline = Boolean(value);\n\n    this._queue([\n      0x1b, 0x2d, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Italic text\n   *\n   * @param value true to turn on italic, false to turn off\n   * @return Return the object, for easy chaining commands\n   */\n  italic(value?: boolean): this {\n    if (typeof value === 'undefined') {\n      value = !this._state.italic;\n    }\n\n    this._state.italic = value;\n\n    this._queue([\n      0x1b, 0x34, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Bold text\n   *\n   * @param value true to turn on bold, false to turn off, or 2 for double underline\n   * @return Return the object, for easy chaining commands\n   */\n  bold(value?: boolean | number): this {\n    if (typeof value === 'undefined') {\n      value = !this._state.bold;\n    }\n\n    this._state.bold = Boolean(value);\n\n    this._queue([\n      0x1b, 0x45, Number(value),\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Change text size\n   *\n   * @param e small, normal, wide, tall, double\n   * @return Return the object, for easy chaining commands\n   */\n  size(e: Size): this {\n    let font = 0; // default: Font A\n    let scale = 0x00; // default: normal size\n\n    switch (e) {\n      case 'small':\n        font = 1; // Font B\n        break;\n      case 'wide':\n        scale = 0x10; // double width\n        break;\n      case 'tall':\n        scale = 0x01; // double height\n        break;\n      case 'double':\n        scale = 0x11; // double width & height\n        break;\n    }\n\n    // Select font\n    this._queue([27, 77, font]);\n    // Apply size scaling\n    this._queue([29, 33, scale]);\n\n    return this;\n  }\n\n  /**\n   * Change text alignment\n   *\n   * @param value left, center or right\n   * @return Return the object, for easy chaining commands\n   */\n  align(value: Alignment): this {\n    const alignments: Record<Alignment, number> = {\n      'left': 0x00,\n      'center': 0x01,\n      'right': 0x02,\n    };\n\n    if (value in alignments) {\n      this._queue([\n        0x1b, 0x61, alignments[value],\n      ]);\n    } else {\n      throw new Error('Unknown alignment');\n    }\n\n    return this;\n  }\n\n  /**\n   * Barcode\n   *\n   * @param value the value of the barcode\n   * @param symbology the type of the barcode\n   * @param height height of the barcode\n   * @return Return the object, for easy chaining commands\n   */\n  barcode(value: string, symbology: Symbology, height: number): this {\n    const symbologies: Record<Symbology, number> = {\n      'upca': 0x00,\n      'upce': 0x01,\n      'ean13': 0x02,\n      'ean8': 0x03,\n      'code39': 0x04,\n      'coda39': 0x04, /* typo, leave here for backwards compatibility */\n      'itf': 0x05,\n      'codabar': 0x06,\n      'code93': 0x48,\n      'code128': 0x49,\n      'gs1-128': 0x50,\n      'gs1-databar-omni': 0x51,\n      'gs1-databar-truncated': 0x52,\n      'gs1-databar-limited': 0x53,\n      'gs1-databar-expanded': 0x54,\n      'code128-auto': 0x55,\n    };\n\n    if (symbology in symbologies) {\n      const bytes = iconv.encode(value, 'ascii');\n\n      this._queue([\n        0x1d, 0x68, height,\n        0x1d, 0x77, symbology === 'code39' ? 0x02 : 0x03,\n      ]);\n\n      if (symbology == 'code128' && bytes[0] !== 0x7b) {\n        /* Not yet encodeded Code 128, assume data is Code B, which is similar to ASCII without control chars */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes.length + 2,\n          0x7b, 0x42,\n          bytes,\n        ]);\n      } else if (symbologies[symbology] > 0x40) {\n        /* Function B symbologies */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes.length,\n          bytes,\n        ]);\n      } else {\n        /* Function A symbologies */\n\n        this._queue([\n          0x1d, 0x6b, symbologies[symbology],\n          bytes,\n          0x00,\n        ]);\n      }\n    } else {\n      throw new Error('Symbology not supported by printer');\n    }\n\n    return this;\n  }\n\n  /**\n   * QR code\n   *\n   * @param value the value of the qr code\n   * @param model model of the qrcode, either 1 or 2\n   * @param size size of the qrcode, a value between 1 and 8\n   * @param errorlevel the amount of error correction used, either 'l', 'm', 'q', 'h'\n   * @return Return the object, for easy chaining commands\n   */\n  qrcode(value: string, model?: 1 | 2, size?: number, errorlevel?: ErrorLevel): this {\n    /* Force printing the print buffer and moving to a new line */\n\n    this._queue([\n      0x0a,\n    ]);\n\n    /* Model */\n\n    const models: Record<1 | 2, number> = {\n      1: 0x31,\n      2: 0x32,\n    };\n\n    if (typeof model === 'undefined') {\n      model = 2;\n    }\n\n    if (model in models) {\n      this._queue([\n        0x1d, 0x28, 0x6b, 0x04, 0x00, 0x31, 0x41, models[model], 0x00,\n      ]);\n    } else {\n      throw new Error('Model must be 1 or 2');\n    }\n\n    /* Size */\n\n    if (typeof size === 'undefined') {\n      size = 6;\n    }\n\n    if (typeof size !== 'number') {\n      throw new Error('Size must be a number');\n    }\n\n    if (size < 1 || size > 8) {\n      throw new Error('Size must be between 1 and 8');\n    }\n\n    this._queue([\n      0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x43, size,\n    ]);\n\n    /* Error level */\n\n    const errorlevels: Record<ErrorLevel, number> = {\n      'l': 0x30,\n      'm': 0x31,\n      'q': 0x32,\n      'h': 0x33,\n    };\n\n    if (typeof errorlevel === 'undefined') {\n      errorlevel = 'm';\n    }\n\n    if (errorlevel in errorlevels) {\n      this._queue([\n        0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x45, errorlevels[errorlevel],\n      ]);\n    } else {\n      throw new Error('Error level must be l, m, q or h');\n    }\n\n    /* Data */\n\n    const bytes = iconv.encode(value, 'iso88591');\n    const length = bytes.length + 3;\n\n    this._queue([\n      0x1d, 0x28, 0x6b, length % 0xff, length / 0xff, 0x31, 0x50, 0x30, bytes,\n    ]);\n\n    /* Print QR code */\n\n    this._queue([\n      0x1d, 0x28, 0x6b, 0x03, 0x00, 0x31, 0x51, 0x30,\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Image\n   *\n   * @param element an element, like a canvas or image that needs to be printed\n   * @param width width of the image on the printer\n   * @param height height of the image on the printer\n   * @param algorithm the dithering algorithm for making the image black and white\n   * @param threshold threshold for the dithering algorithm\n   * @return Return the object, for easy chaining commands\n   */\n  image(element: Canvas | any, width: number, height: number, algorithm?: DitherAlgorithm, threshold?: number): this {\n    if (width % 8 !== 0) {\n      throw new Error('Width must be a multiple of 8');\n    }\n\n    if (height % 8 !== 0) {\n      throw new Error('Height must be a multiple of 8');\n    }\n\n    if (typeof algorithm === 'undefined') {\n      algorithm = 'threshold';\n    }\n\n    if (typeof threshold === 'undefined') {\n      threshold = 128;\n    }\n\n    const canvas = createCanvas(width, height);\n    const context = canvas.getContext('2d');\n    context.drawImage(element, 0, 0, width, height);\n    let image = context.getImageData(0, 0, width, height);\n\n    image = Flatten.flatten(image, [0xff, 0xff, 0xff]);\n\n    switch (algorithm) {\n      case 'threshold': image = Dither.threshold(image, threshold); break;\n      case 'bayer': image = Dither.bayer(image, threshold); break;\n      case 'floydsteinberg': image = Dither.floydsteinberg(image); break;\n      case 'atkinson': image = Dither.atkinson(image); break;\n    }\n\n    const getPixel = (x: number, y: number): number => (image.data?.[((width * y) + x) * 4] ?? 0) > 0 ? 0 : 1;\n\n    const bytes = new Uint8Array((width * height) >> 3);\n\n    for (let y = 0; y < height; y++) {\n      for (let x = 0; x < width; x = x + 8) {\n        const i = (y * (width >> 3)) + (x >> 3);\n        bytes[i] =\n                    getPixel(x + 0, y) << 7 |\n                    getPixel(x + 1, y) << 6 |\n                    getPixel(x + 2, y) << 5 |\n                    getPixel(x + 3, y) << 4 |\n                    getPixel(x + 4, y) << 3 |\n                    getPixel(x + 5, y) << 2 |\n                    getPixel(x + 6, y) << 1 |\n                    getPixel(x + 7, y);\n      }\n    }\n\n    this._queue([\n      0x1d, 0x76, 0x30, 0x00,\n      (width >> 3) & 0xff, (((width >> 3) >> 8) & 0xff),\n      height & 0xff, ((height >> 8) & 0xff),\n      bytes,\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Cut paper\n   *\n   * @param value full or partial. When not specified a full cut will be assumed\n   * @return Return the object, for easy chaining commands\n   */\n  cut(value?: CutType): this {\n    let data = 0x00;\n\n    if (value == 'partial') {\n      data = 0x01;\n    }\n\n    this._queue([\n      0x1d, 0x56, data,\n    ]);\n\n    return this;\n  }\n\n  /**\n   * Add raw printer commands\n   *\n   * @param data raw bytes to be included\n   * @return Return the object, for easy chaining commands\n   */\n  raw(data: (number | Uint8Array | Buffer)[]): this {\n    this._queue(data);\n\n    return this;\n  }\n\n  /**\n   * Encode all previous commands\n   *\n   * @return Return the encoded bytes\n   */\n  encode(): Uint8Array {\n    let length = 0;\n\n    this._buffer.forEach((item) => {\n      if (typeof item === 'number') {\n        length++;\n      } else {\n        length += item.length;\n      }\n    });\n\n    const result = new Uint8Array(length);\n\n    let index = 0;\n\n    this._buffer.forEach((item) => {\n      if (typeof item === 'number') {\n        result[index] = item;\n        index++;\n      } else {\n        result.set(item, index);\n        index += item.length;\n      }\n    });\n\n    this._reset();\n\n    return result;\n  }\n}\n\n"],"mappings":"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","ignoreList":[]}